Token: Separator		Lexeme: @@
	<Opt Function Definitions> -> <Empty>
	<Empty> -> epsilon
Token: Separator		Lexeme: @@
	<Opt Declaration List> -> <Empty>
	<Empty> -> epsilon
Token: Keyword		Lexeme: while
	<Statement List> -> <Statement>
	<Statement> -> <While>
	<While> -> while ( <Condition> ) <Statement>
Token: Keyword		Lexeme: while
Token: Separator		Lexeme: (
Token: Integer		Lexeme: 2
	<Condition> -> <Expression>  <Relop>   <Expression>
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Integer>
Token: Relop		Lexeme: >
	<Term Prime> -> epsilon
	<Expression Prime> -> epsilon
	<Relop> -> >
Token: Integer		Lexeme: 3
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Integer>
Token: Separator		Lexeme: )
	<Term Prime> -> epsilon
	<Expression Prime> -> epsilon
Token: Separator		Lexeme: {
	<Statement> -> <Compound>
	<Compound> -> { <Statement List> }
Token: Identifier		Lexeme: a
	<Statement List> -> <Statement>
	<Statement> -> <Assignment>
	<Assignment> -> <Identifier> := <Expression>;
Token: Operator		Lexeme: :=
Token: Integer		Lexeme: 3
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Integer>
Token: Separator		Lexeme: ;
	<Term Prime> -> epsilon
	<Expression Prime> -> epsilon
Token: Separator		Lexeme: }
Token: Identifier		Lexeme: a
	<Statement List> -> <Statement>
	<Statement> -> <Assignment>
	<Assignment> -> <Identifier> := <Expression>;
Token: Operator		Lexeme: :=
Token: Integer		Lexeme: 4
	<Expression> -> <Term> <Expression Prime>
	<Term> -> <Factor> <Term Prime>
	<Factor> -> <Integer>
Token: Separator		Lexeme: ;
	<Term Prime> -> epsilon
	<Expression Prime> -> epsilon
